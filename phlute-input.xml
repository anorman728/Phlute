<?xml version="1.0" encoding="UTF-8"?>
<!-- vi:set syntax=phml: -->
<phlute default-output="./output">
    <macros><!-- Macros only apply to node content, not attributes, and *not* to CDATA content. -->
        <macro name="mymac">This is a macro.  This is "$1", the first argument, and this is "$2", the second argument.</macro>
        <macro name="propmac">Comments in properties can be useful for separating large segments of properties into sections, like "These are the properties for handling shapes."</macro>
        <macro name="input-desc">this macro is used in an input description for $1.</macro>
    </macros>
    <class name="MyClass" author="Andrew Norman" namespace="App\Lib" extends="ParentClass" implements="Metric Shape">
        <superdocs>
            <superdoc>This is a docblock that appears before the other docblock.  It's for extra notes that don't quite fit what the class docblock needs to be.</superdoc>
            <superdoc>There can be multiple superdocs.</superdoc>
        </superdocs>
        <doc>This is my class.  There are many like it, but this one is mine.</doc>
        <uses>
            <use value="App\Model\DbClass"/>
            <use value="App\Model\MyTrait"/>
            <use value="Vendor\ParentClass"/>
        </uses>
        <traits>
            <trait value='MyTrait'/>
            <trait value='YourTrait'/>
            <trait value='OurTrait'/>
        </traits>
        <properties>
            <property type="?int" name="count" default="1" doc="The count."/>
            <comment>This is a comment in the properties.</comment>
            <comment>{{propmac}}</comment>
            <property type="string" setter="0" name="name" doc="The name of the object."/>
            <public>
                <property type="string" name="height" default="5'6\&quot;" doc="This should be public." setter="0" getter="0"/>
            </public>
        </properties>
        <methods>
            <public>
                <method return="void" name="__construct">
                    <doc>The constructor.</doc>
                    <input type="string" name="name" desc='The name'/>
                </method>
                <comment>This is a comment.</comment>
                <method return="int" name="increment">
                    <doc>Increment the count</doc>
                    <content><![CDATA[<?
                        if ($this->count > 10) {
                            $this->count = 0;
                        }

                        return ++$this->count;
                    ?>]]></content>
                </method>
                <method return="void" name="view">
                    <doc>View name</doc>
                    <content><![CDATA[<?php print_r($this->getName()); ?>]]></content>
                </method>
            </public>
            <private>
                <method return="void" name="secretfunction">
                    <throws exception="InvalidArgumentException" desc="If Q is less than zero."/>
                    <doc>Not an accessible function.</doc>
                </method>
            </private>
        </methods>
    </class>
    <class name="MyClass2" author="Andrew Norman" namespace="App\Lib\MyNamespace" output="./output/MyNamespace" keywords="abstract">
        <superdocs>
            <superdoc>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
                Section 1.10.32 of "de Finibus Bonorum et Malorum", written by Cicero in 45 BC

                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"
            </superdoc>
        </superdocs>
        <doc>Subspace.  {{mymac first second}} That was a macro in action.</doc>
        <properties>
            <property name="myProp" type="int" doc="My Property" default="10"/>
            <comment>Constants will always appear first, including before comments.</comment>
            <constant name="MY_CONST" type="string" doc="This is a constant." value="testing123"/>
        </properties>
        <methods>
            <protected>
                <method return="void" name="salmak" keywords="abstract">
                    <doc>
                        This is an abstract function.

                        I don't know what "salmak" means, but it sounds like a Star Trek name.  It is *not* Sarek, though.
                    </doc>
                </method>
            </protected>
            <method return="string" name="myfunc01">
                <doc>My function 01.</doc>
                <input type="string" name="strInput">
                    <desc>Hello, {{input-desc "My function 01"}}</desc>
                </input>
            </method>
        </methods>
    </class>
    <class name="MyClass3" author="Misshapen Head" namespace="App\Lib\MyNamespace" doc="Attribute documentation.">
        <properties>
            <public>
                <property type="string" name="prop01" default="7">
                    <doc>This is documentation in child element of a property.</doc>
                    <getter return="string" name="getProp01" doc="Custom getter for prop01."/>
                </property>
            </public>
            <constant name="CONSTANTINOPLE" type="string" value="Turkish delight on a moonlit night.">
                <doc>Will change to Istanbul in future release.</doc>
            </constant>
        </properties>
        <methods>
            <method return="int" name="newMethod" doc="Attribute method doc."/>
            <method name="longSignature" return="void">
                <doc>This method should have a very long signature.</doc>
                <input type="string" name="var01" desc="This is a variable."/>
                <input type="string" name="var02" desc="This is a variable."/>
                <input type="string" name="var03" desc="This is a variable."/>
                <input type="string" name="var04" desc="This is a variable."/>
            </method>
        </methods>
    </class>
    <trait name="MyTrait" author="Andrew Norman" namespace="App\Lib\MyTraits" output="./output/Lib">
        <doc>This is a trait.</doc>
        <properties>
            <constant name="TEST_CONST" type="int" value="9" doc="testing constant"/>
        </properties>
    </trait>
    <interface name="MyInterface" author="Andrew Norman" namespace="App\Lib\MyTraits" output="./output/Lib">
        <doc>This is an interface.</doc>
        <methods>
            <method return="int" name="interfaceMethod">
                <doc>This is a method for an interface.</doc>
            </method>
        </methods>
    </interface>
    <class name="MyClassTest" author="Andrew Norman" namespace="App\Test\TestCase\Lib" output="./output/test/TestCase/Lib">
        <doc>Test case for MyClass.</doc>
        <uses>
            <use value="PHPUnit\TestCase"/>
            <use value="App\Lib\MyClass"/>
        </uses>
        <methods>
            <public>
                <method return="void" name="testIncrement">
                    <doc>Test increment function.</doc>
                    <doc-extra>
                        <attribute name="covers">App\Lib\MyClass::increment</attribute>
                        <!-- Can, and probably should, use macros, so don't have to repeat the fully-namespaced class every time. -->
                    </doc-extra>
                </method>
                <method return="void" name="testIncrementException">
                    <!-- This makes zero sense given what the increment function does, but bear with me. -->
                    <doc>Test exception if have invalid input.</doc>
                    <doc-extra>
                        <attribute name="covers">App\Lib\MyClass::increment</attribute>
                        <attribute name="expectedException">\InvalidArgumentException</attribute>
                        <attribute name="expectedExceptionMessage">Unexpected item in bagging area.</attribute>
                    </doc-extra>
                </method>
            </public>
        </methods>
    </class>
</phlute>
